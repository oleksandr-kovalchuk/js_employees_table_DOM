{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCGA,IAAM,EAAQ,SAAS,aAAa,CAAC,SACjC,EAAY,KACZ,EAAgB,CAAA,EAEd,EAAgB,CACpB,EAAG,SAAC,CAAJ,EAAa,OAAA,SAAS,E,EACtB,EAAG,SAAC,CAAJ,EAAa,OAAA,WAAW,EAAK,KAAK,CAAC,GAAG,UAAU,CAAC,IAAK,I,CACxD,EAEA,SAAS,EAAc,CAAI,EACzB,OAAO,CACT,CA8EI,EAvEK,AAJC,EAAG,EAAM,gBAAgB,CAAC,aAItB,GAAG,CAAC,SAAC,CAAjB,EACE,OAAQ,EAAG,EAAI,QAAQ,EAAE,GAAG,CAAC,SAAC,CAA9B,EAAuC,OAAA,EAAK,SAAS,A,EACvD,GA8DA,EAAM,gBAAgB,CAAC,MAAM,OAAO,CAAC,SAAC,CAAA,CAAQ,CAA9C,EACE,EAAO,gBAAgB,CAAC,QAAS,eAhDD,EAgBT,EACnB,EAjB4B,EAwCY,EAxBrB,EAflB,EAAU,IAAI,CAAC,SAAC,CAAA,CAAM,CAA7B,EACE,IARmB,EAAA,EAQf,EAAQ,CAAI,CA8CiC,EA9CpB,CACzB,EAAQ,CAAI,CA6CiC,EA7CpB,OAK7B,CAdmB,EAWG,EAAtB,EARK,AAFQ,CAAA,CAAa,CAqDuB,EArDV,EAAI,CAA7C,EAEc,GAHO,EAYG,EAAtB,EATK,AAFQ,CAAA,CAAa,CAqDuB,EArDV,EAAI,CAA7C,EAEc,GAWR,GACK,EAAQ,EAAQ,EAAI,GAGtB,EAAQ,EAAQ,GAAK,CAC9B,GAMA,CAFM,EAAY,EAAM,aAAa,CAAC,UAE5B,SAAS,CAAG,GAEtB,EAAW,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// 1. Implement table sorting by clicking on the title (in two directions).\nvar table = document.querySelector(\"table\");\nvar tableData = null;\nvar sortDirection = true;\nvar columnParsers = {\n    3: function(cell) {\n        return parseInt(cell);\n    },\n    4: function(cell) {\n        return parseFloat(cell.slice(1).replaceAll(\",\", \"\"));\n    }\n};\nfunction defaultParser(cell) {\n    return cell;\n}\nfunction getTableRows() {\n    return _to_consumable_array(table.querySelectorAll(\"tbody tr\"));\n}\nfunction mapTableData(rows) {\n    return rows.map(function(row) {\n        return _to_consumable_array(row.children).map(function(cell) {\n            return cell.innerText;\n        });\n    });\n}\nfunction getTableData() {\n    var rows = getTableRows();\n    return mapTableData(rows);\n}\nfunction parseCellData(cell, columnIndex) {\n    var parser = columnParsers[columnIndex] || defaultParser;\n    return parser(cell);\n}\nfunction sortTableData(columnIndex, direction) {\n    return tableData.sort(function(rowA, rowB) {\n        var cellA = rowA[columnIndex];\n        var cellB = rowB[columnIndex];\n        cellA = parseCellData(cellA, columnIndex);\n        cellB = parseCellData(cellB, columnIndex);\n        if (direction) return cellA > cellB ? 1 : -1;\n        return cellA > cellB ? -1 : 1;\n    });\n}\nfunction renderSortedTable(sortedData) {\n    var tableBody = table.querySelector(\"tbody\");\n    tableBody.innerHTML = \"\";\n    sortedData.forEach(function(rowData) {\n        var row = document.createElement(\"tr\");\n        rowData.forEach(function(cellData) {\n            var cell = document.createElement(\"td\");\n            cell.textContent = cellData;\n            row.appendChild(cell);\n        });\n        tableBody.appendChild(row);\n    });\n}\nfunction toggleSortDirection() {\n    sortDirection = !sortDirection;\n}\nfunction sortTable(columnIndex) {\n    var sortedData = sortTableData(columnIndex, sortDirection);\n    renderSortedTable(sortedData);\n    toggleSortDirection();\n}\nfunction attachSortingListeners() {\n    table.querySelectorAll(\"th\").forEach(function(header, index) {\n        header.addEventListener(\"click\", function() {\n            return sortTable(index);\n        });\n    });\n}\nfunction initializeTable() {\n    if (!tableData) tableData = getTableData();\n    attachSortingListeners();\n}\ninitializeTable();\n// 2. When user clicks on a row, it should become selected.\nvar activeRowIndex = null;\nvar tbody = table.querySelector(\"tbody\");\nfunction updateActiveRow() {\n    tbody.querySelectorAll(\"tr\").forEach(function(row, index) {\n        if (index === activeRowIndex) row.classList.add(\"active\");\n        else row.classList.remove(\"active\");\n    });\n}\ntbody.addEventListener(\"click\", function(e) {\n    var row = e.target.closest(\"tr\");\n    if (!row) return;\n    var rowIndex = _to_consumable_array(tbody.querySelectorAll(\"tr\")).indexOf(row);\n    activeRowIndex = rowIndex;\n    updateActiveRow();\n});\n// 3. Write a script to add a form to the document.\n// Form allows users to add new employees to the spreadsheet.\nvar formHtml = '\\n  <form class=\"new-employee-form\">\\n    <label>\\n      Name:\\n      <input\\n        name=\"name\"\\n        type=\"text\"\\n        data-qa=\"name\"\\n      />\\n    </label>\\n    <label>\\n      Position:\\n      <input\\n        name=\"position\"\\n        type=\"text\"\\n        data-qa=\"position\"\\n      />\\n    </label>\\n    <label>\\n      Office:\\n      <select\\n        name=\"office\"\\n        data-qa=\"office\"\\n      >\\n        <option value=\"Tokyo\">Tokyo</option>\\n        <option value=\"Singapore\">Singapore</option>\\n        <option value=\"London\">London</option>\\n        <option value=\"New York\">New York</option>\\n        <option value=\"Edinburgh\">Edinburgh</option>\\n        <option value=\"San Francisco\">San Francisco</option>\\n      </select>\\n    </label>\\n    <label>\\n      Age:\\n      <input\\n        name=\"age\"\\n        type=\"number\"\\n        data-qa=\"age\"\\n      />\\n    </label>\\n    <label>\\n      Salary:\\n      <input\\n        name=\"salary\"\\n        type=\"number\"\\n        data-qa=\"salary\"\\n      />\\n    </label>\\n    <button\\n      type=\"button\"\\n      id=\"save-button\"\\n    >\\n      Save to table\\n    </button>\\n  </form>\\n  ';\ntable.insertAdjacentHTML(\"afterend\", formHtml);\n// 4. Show notification if form data is invalid\nfunction createNotification(message, type) {\n    var notification = document.createElement(\"div\");\n    var titleSpan = document.createElement(\"span\");\n    notification.className = \"notification \".concat(type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    titleSpan.className = \"title\";\n    titleSpan.textContent = type.toUpperCase();\n    notification.appendChild(titleSpan);\n    notification.innerHTML += \" <span>\".concat(message, \"</span>\");\n    document.body.appendChild(notification);\n    return notification;\n}\nfunction dismissNotification(notification) {\n    var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2000;\n    setTimeout(function() {\n        notification.remove();\n    }, delay);\n}\nfunction pushNotification(message, type) {\n    var notification = createNotification(message, type);\n    dismissNotification(notification);\n}\nfunction validateName(formName) {\n    var nameRegex = /^[A-Za-z\\s]+$/;\n    return formName.length >= 4 && nameRegex.test(formName);\n}\nfunction validateAge(age) {\n    return age >= 18 && age <= 90;\n}\nfunction validatePosition(position) {\n    return position.trim() !== \"\";\n}\nfunction validateOffice(office) {\n    return office.trim() !== \"\";\n}\nfunction validateSalary(salary) {\n    var parsedSalary = parseFloat(salary);\n    return !isNaN(parsedSalary) && parsedSalary > 0;\n}\nfunction handleValidationErrors(formData) {\n    if (!validateName(formData.name)) pushNotification(\"Name must be at least 4 characters long and contain only letters.\", \"error\");\n    if (!validateAge(formData.age)) pushNotification(\"Age must be between 18 and 90.\", \"error\");\n    if (!validatePosition(formData.position)) pushNotification(\"Position is required.\", \"error\");\n    if (!validateOffice(formData.office)) pushNotification(\"Office is required.\", \"error\");\n    if (!validateSalary(formData.salary)) pushNotification(\"Salary must be a valid positive number.\", \"error\");\n}\nfunction validateFormData(formData) {\n    var isValid = validateName(formData.name) && validateAge(formData.age) && validatePosition(formData.position) && validateOffice(formData.office) && validateSalary(formData.salary);\n    if (!isValid) handleValidationErrors(formData);\n    return isValid;\n}\nvar form = document.querySelector(\".new-employee-form\");\nfunction getFormData(formData) {\n    return _to_consumable_array(formData.elements).reduce(function(acc, formInput) {\n        if (formInput.name) acc[formInput.name] = formInput.value;\n        return acc;\n    }, {});\n}\nfunction createTableRow(formData) {\n    var newRow = document.createElement(\"tr\");\n    newRow.innerHTML = \"\\n    <td>\".concat(formData.name, \"</td>\\n    <td>\").concat(formData.position, \"</td>\\n    <td>\").concat(formData.office, \"</td>\\n    <td>\").concat(formData.age, \"</td>\\n    <td>$\").concat(parseInt(formData.salary).toLocaleString(\"en-US\"), \"</td>\");\n    return newRow;\n}\nfunction appendRowToTable(row) {\n    var tableBody = table.querySelector(\"tbody\");\n    tableBody.appendChild(row);\n}\nfunction handleFormSubmission() {\n    var formData = getFormData(form);\n    if (validateFormData(formData)) {\n        var newRow = createTableRow(formData);\n        appendRowToTable(newRow);\n        pushNotification(\"Employee added successfully!\", \"success\");\n        form.reset();\n    }\n}\ndocument.getElementById(\"save-button\").addEventListener(\"click\", handleFormSubmission);\n// 5. Implement editing of table cells by double-clicking on it. (optional)\nvar editingCell = null;\nfunction saveCellValue(cell, input) {\n    cell.innerText = input.value || input.getAttribute(\"data-initial\");\n    editingCell = null;\n}\nfunction startCellEditing(cell) {\n    var input = document.createElement(\"input\");\n    input.className = \"cell-input\";\n    var initialValue = cell.innerText;\n    input.setAttribute(\"data-initial\", initialValue);\n    input.value = initialValue;\n    cell.innerText = \"\";\n    cell.appendChild(input);\n    input.focus();\n    editingCell = {\n        cell: cell,\n        input: input\n    };\n    input.addEventListener(\"blur\", function() {\n        return saveCellValue(cell, input);\n    });\n    input.addEventListener(\"keypress\", function(e) {\n        if (e.key === \"Enter\") saveCellValue(cell, input);\n    });\n}\ndocument.querySelector(\"tbody\").addEventListener(\"dblclick\", function(e) {\n    var cell = e.target;\n    if (cell.tagName.toLowerCase() === \"td\" && editingCell === null) startCellEditing(cell);\n});\n\n//# sourceMappingURL=index.c8422054.js.map\n","'use strict';\n\n// 1. Implement table sorting by clicking on the title (in two directions).\nconst table = document.querySelector('table');\nlet tableData = null;\nlet sortDirection = true;\n\nconst columnParsers = {\n  3: (cell) => parseInt(cell),\n  4: (cell) => parseFloat(cell.slice(1).replaceAll(',', '')),\n};\n\nfunction defaultParser(cell) {\n  return cell;\n}\n\nfunction getTableRows() {\n  return [...table.querySelectorAll('tbody tr')];\n}\n\nfunction mapTableData(rows) {\n  return rows.map((row) => {\n    return [...row.children].map((cell) => cell.innerText);\n  });\n}\n\nfunction getTableData() {\n  const rows = getTableRows();\n\n  return mapTableData(rows);\n}\n\nfunction parseCellData(cell, columnIndex) {\n  const parser = columnParsers[columnIndex] || defaultParser;\n\n  return parser(cell);\n}\n\nfunction sortTableData(columnIndex, direction) {\n  return tableData.sort((rowA, rowB) => {\n    let cellA = rowA[columnIndex];\n    let cellB = rowB[columnIndex];\n\n    cellA = parseCellData(cellA, columnIndex);\n    cellB = parseCellData(cellB, columnIndex);\n\n    if (direction) {\n      return cellA > cellB ? 1 : -1;\n    }\n\n    return cellA > cellB ? -1 : 1;\n  });\n}\n\nfunction renderSortedTable(sortedData) {\n  const tableBody = table.querySelector('tbody');\n\n  tableBody.innerHTML = '';\n\n  sortedData.forEach((rowData) => {\n    const row = document.createElement('tr');\n\n    rowData.forEach((cellData) => {\n      const cell = document.createElement('td');\n\n      cell.textContent = cellData;\n      row.appendChild(cell);\n    });\n\n    tableBody.appendChild(row);\n  });\n}\n\nfunction toggleSortDirection() {\n  sortDirection = !sortDirection;\n}\n\nfunction sortTable(columnIndex) {\n  const sortedData = sortTableData(columnIndex, sortDirection);\n\n  renderSortedTable(sortedData);\n  toggleSortDirection();\n}\n\nfunction attachSortingListeners() {\n  table.querySelectorAll('th').forEach((header, index) => {\n    header.addEventListener('click', () => sortTable(index));\n  });\n}\n\nfunction initializeTable() {\n  if (!tableData) {\n    tableData = getTableData();\n  }\n  attachSortingListeners();\n}\n\ninitializeTable();\n\n// 2. When user clicks on a row, it should become selected.\nlet activeRowIndex = null;\nconst tbody = table.querySelector('tbody');\n\nfunction updateActiveRow() {\n  tbody.querySelectorAll('tr').forEach((row, index) => {\n    if (index === activeRowIndex) {\n      row.classList.add('active');\n    } else {\n      row.classList.remove('active');\n    }\n  });\n}\n\ntbody.addEventListener('click', (e) => {\n  const row = e.target.closest('tr');\n\n  if (!row) {\n    return;\n  }\n\n  const rowIndex = [...tbody.querySelectorAll('tr')].indexOf(row);\n\n  activeRowIndex = rowIndex;\n\n  updateActiveRow();\n});\n\n// 3. Write a script to add a form to the document.\n// Form allows users to add new employees to the spreadsheet.\nconst formHtml = `\n  <form class=\"new-employee-form\">\n    <label>\n      Name:\n      <input\n        name=\"name\"\n        type=\"text\"\n        data-qa=\"name\"\n      />\n    </label>\n    <label>\n      Position:\n      <input\n        name=\"position\"\n        type=\"text\"\n        data-qa=\"position\"\n      />\n    </label>\n    <label>\n      Office:\n      <select\n        name=\"office\"\n        data-qa=\"office\"\n      >\n        <option value=\"Tokyo\">Tokyo</option>\n        <option value=\"Singapore\">Singapore</option>\n        <option value=\"London\">London</option>\n        <option value=\"New York\">New York</option>\n        <option value=\"Edinburgh\">Edinburgh</option>\n        <option value=\"San Francisco\">San Francisco</option>\n      </select>\n    </label>\n    <label>\n      Age:\n      <input\n        name=\"age\"\n        type=\"number\"\n        data-qa=\"age\"\n      />\n    </label>\n    <label>\n      Salary:\n      <input\n        name=\"salary\"\n        type=\"number\"\n        data-qa=\"salary\"\n      />\n    </label>\n    <button\n      type=\"button\"\n      id=\"save-button\"\n    >\n      Save to table\n    </button>\n  </form>\n  `;\n\ntable.insertAdjacentHTML('afterend', formHtml);\n\n// 4. Show notification if form data is invalid\nfunction createNotification(message, type) {\n  const notification = document.createElement('div');\n  const titleSpan = document.createElement('span');\n\n  notification.className = `notification ${type}`;\n  notification.setAttribute('data-qa', 'notification');\n\n  titleSpan.className = 'title';\n  titleSpan.textContent = type.toUpperCase();\n\n  notification.appendChild(titleSpan);\n  notification.innerHTML += ` <span>${message}</span>`;\n  document.body.appendChild(notification);\n\n  return notification;\n}\n\nfunction dismissNotification(notification, delay = 2000) {\n  setTimeout(() => {\n    notification.remove();\n  }, delay);\n}\n\nfunction pushNotification(message, type) {\n  const notification = createNotification(message, type);\n\n  dismissNotification(notification);\n}\n\nfunction validateName(formName) {\n  const nameRegex = /^[A-Za-z\\s]+$/;\n\n  return formName.length >= 4 && nameRegex.test(formName);\n}\n\nfunction validateAge(age) {\n  return age >= 18 && age <= 90;\n}\n\nfunction validatePosition(position) {\n  return position.trim() !== '';\n}\n\nfunction validateOffice(office) {\n  return office.trim() !== '';\n}\n\nfunction validateSalary(salary) {\n  const parsedSalary = parseFloat(salary);\n\n  return !isNaN(parsedSalary) && parsedSalary > 0;\n}\n\nfunction handleValidationErrors(formData) {\n  if (!validateName(formData.name)) {\n    pushNotification(\n      'Name must be at least 4 characters long and contain only letters.',\n      'error',\n    );\n  }\n\n  if (!validateAge(formData.age)) {\n    pushNotification('Age must be between 18 and 90.', 'error');\n  }\n\n  if (!validatePosition(formData.position)) {\n    pushNotification('Position is required.', 'error');\n  }\n\n  if (!validateOffice(formData.office)) {\n    pushNotification('Office is required.', 'error');\n  }\n\n  if (!validateSalary(formData.salary)) {\n    pushNotification('Salary must be a valid positive number.', 'error');\n  }\n}\n\nfunction validateFormData(formData) {\n  const isValid =\n    validateName(formData.name) &&\n    validateAge(formData.age) &&\n    validatePosition(formData.position) &&\n    validateOffice(formData.office) &&\n    validateSalary(formData.salary);\n\n  if (!isValid) {\n    handleValidationErrors(formData);\n  }\n\n  return isValid;\n}\n\nconst form = document.querySelector('.new-employee-form');\n\nfunction getFormData(formData) {\n  return [...formData.elements].reduce((acc, formInput) => {\n    if (formInput.name) {\n      acc[formInput.name] = formInput.value;\n    }\n\n    return acc;\n  }, {});\n}\n\nfunction createTableRow(formData) {\n  const newRow = document.createElement('tr');\n\n  newRow.innerHTML = `\n    <td>${formData.name}</td>\n    <td>${formData.position}</td>\n    <td>${formData.office}</td>\n    <td>${formData.age}</td>\n    <td>$${parseInt(formData.salary).toLocaleString('en-US')}</td>`;\n\n  return newRow;\n}\n\nfunction appendRowToTable(row) {\n  const tableBody = table.querySelector('tbody');\n\n  tableBody.appendChild(row);\n}\n\nfunction handleFormSubmission() {\n  const formData = getFormData(form);\n\n  if (validateFormData(formData)) {\n    const newRow = createTableRow(formData);\n\n    appendRowToTable(newRow);\n    pushNotification('Employee added successfully!', 'success');\n    form.reset();\n  }\n}\n\ndocument\n  .getElementById('save-button')\n  .addEventListener('click', handleFormSubmission);\n\n// 5. Implement editing of table cells by double-clicking on it. (optional)\nlet editingCell = null;\n\nfunction saveCellValue(cell, input) {\n  cell.innerText = input.value || input.getAttribute('data-initial');\n  editingCell = null;\n}\n\nfunction startCellEditing(cell) {\n  const input = document.createElement('input');\n\n  input.className = 'cell-input';\n\n  const initialValue = cell.innerText;\n\n  input.setAttribute('data-initial', initialValue);\n  input.value = initialValue;\n\n  cell.innerText = '';\n  cell.appendChild(input);\n  input.focus();\n\n  editingCell = { cell, input };\n\n  input.addEventListener('blur', () => saveCellValue(cell, input));\n\n  input.addEventListener('keypress', (e) => {\n    if (e.key === 'Enter') {\n      saveCellValue(cell, input);\n    }\n  });\n}\n\ndocument.querySelector('tbody').addEventListener('dblclick', (e) => {\n  const cell = e.target;\n\n  if (cell.tagName.toLowerCase() === 'td' && editingCell === null) {\n    startCellEditing(cell);\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","tableData","sortDirection","columnParsers","cell","parseInt","parseFloat","replaceAll","defaultParser","rows","querySelectorAll","map","row","children","innerText","forEach","header","index","addEventListener","direction","sortedData","tableBody","sort","rowA","rowB","cellA","cellB","parser","innerHTML","rowData","createElement","cellData","textContent","appendChild","activeRowIndex","tbody","pushNotification","message","type","notification","titleSpan","dismissNotification","delay","arguments","setTimeout","remove","className","concat","setAttribute","toUpperCase","body","validateName","formName","nameRegex","validateAge","age","validatePosition","position","trim","validateOffice","office","validateSalary","salary","parsedSalary","isNaN","e","target","closest","indexOf","classList","add","insertAdjacentHTML","form","getElementById","formData","isValid","newRow","elements","reduce","acc","formInput","value","toLocaleString","reset","editingCell","saveCellValue","input","getAttribute","initialValue","tagName","toLowerCase","focus","key"],"version":3,"file":"index.c8422054.js.map"}